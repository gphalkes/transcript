# Copyright (C) 2011 G.P. Halkes
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

EXTENSIONS="c libtool cxx pkgconfig verbose_compile gettext"
MAKEFILES="Makefile mk/libtranscript mk/linkltc mk/ucm2ltc"

SWITCHES="-ucm2ltc"
DEFAULT_LINGUAS=nl
LTSHARED=1
INSTALLDIRS="bindir libdir docdir mandir includedir pkgconfigdir"

USERHELP=print_help
PRECHECKFUNC=precheck

print_help() {
	cat <<EOF
  --with-ucm2ltc     Build converter specification compiler (ucm2ltc)
                           Requires a working C++ compiler
EOF
}

precheck() {
	if [ "no" = "${with_ucm2ltc}" ] ; then
		EXTENSIONS="`echo \"${EXTENSIONS}\" | sed 's/[^ ]*cxx//g'`"
	fi
}

checkfunction() {
	clean .config.o

	CHECKFOR="$1"
	CODE="$2"
	shift 2
	{
		for INCLUDE
		do
			echo "#include ${INCLUDE}"
		done
		cat <<EOF
int main(int argc, char *argv[]) {
	${CODE}
	return 0;
}
EOF
	} > .config.c

	clean .config.o
	test_link "${CHECKFOR}"
}

config() {
	unset CONFIGFLAGS
	# Test for all required functionality

	cat > .config.c <<EOF
#include <sys/types.h>
#include <stdint.h>
#include <dirent.h>

int main(int argc, char *argv[]) {
	DIR *dir;
	struct dirent *entry;
	uint16_t foo;

	dir = opendir(".");
	entry = readdir(dir);
	puts(entry->d_name[0]);
	closedir(dir);
	return 0;
}
EOF

	clean .config.o
	test_link "opendir/readdir/closedir/dirent.h/stdint.h" || error "!! Some required functionality is not available. See config.log for details."

	cat > .config.c <<EOF
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
	struct stat statbuf;
	symlink("old", "new");
	unlink("name");
	lstat("name", &statbuf);
	S_ISLNK(statbuf.st_mode);
	return 0;
}
EOF

	clean .config.o
	test_link "symlink/unlink/lstat" || error "!! Some required functionality is not available. See config.log for details."

	cat > .config.c <<EOF
#include <ltdl.h>

int main(int argc, char *argv[]) {
	lt_dlhandle handle;
	handle = lt_dlopen("name");
	lt_dlerror();
	lt_dlsym(handle, "sym_name");
	lt_dlclose(handle);
	lt_dlinit();
	lt_dlexit();
	return 0;
}
EOF

	clean .config.o
	test_link "libltdl" "TESTLIBS=-lltdl" || error "!! Can not find libltdl. libltdl is required to compile libtranscript."

	HAS_SETLOCALE=unknown
	if checkfunction "nl_langinfo" "nl_langinfo(CODESET);" "<langinfo.h>" ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DHAS_NL_LANGINFO"
	elif checkfunction "setlocale" "setlocale(LC_CTYPE, NULL);" "<locale.h>" ; then
		HAS_SETLOCALE=yes
	else
		error "!! A required function is not available."
	fi

	checkfunction "strdup" "strdup(\"foo\");" "<string.h>" && CONFIGFLAGS="${CONFIGFLAGS} -DHAS_STRDUP"

	if checkfunction "htole32 in <sys/endian.h>" "htole32(20);" "<sys/endian.h>" ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DUSE_SYS_ENDIAN"
	elif checkfunction "htole32 in <endian.h>" "htole32(20);" "<endian.h>" ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DUSE_ENDIAN"
	fi

	cat > .config.c <<EOF
static inline int foo() { return 4; }
int main(int argc, char *argv[]) {
	return foo;
}
EOF
	test_compile "inline keyword" && CONFIGFLAGS="${CONFIGFLAGS} -DHAS_INLINE"

	if [ yes = "${with_ucm2ltc}" ] ; then
		cat > .configcxx.cc <<EOF
#include <stdio.h>

int main(int argc, char *argv[]) {
	char test[10];
	snprintf(test, sizeof(test), "foo");
}
EOF
		clean .configcxx.o
		test_link_cxx "snprintf" || error "!! Function required for ucm2ltc not found. Try configuring without --with-ucm2ltc."
	else
		MAKEFILES="Makefile mk/libtranscript mk/linkltc"
		cat > mk/ucm2ltc <<EOF
all:
clean:
dist-clean:
EOF
	fi

	create_makefile "CONFIGFLAGS=${CONFIGFLAGS} -lltdl"
}
