/* Copyright (C) 2010 G.P. Halkes
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License version 3, as
   published by the Free Software Foundation.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


%options "generate-symbol-table lowercase-symbols generate-lexer-wrapper reentrant";
%label CHARMAP, "CHARMAP";
%label VARIANT, "VARIANT";
%label END, "END";
%label HEXNUM, "hexadecimal number";
%label HEXNUMBER, "hexadecimal number";
%label CHARSEQ, "character sequence";
%label _INITIAL, "initial";
%label _STATE, "state";
%token TAG, SURROGATES, ACTION, STRING, NUMBER, PRECISION;

%start parse_ucm, ucm;

{
#include <stdlib.h>
#include <stdio.h>

#include "ucm2cct.h"

extern char *yytext;

void LLmessage(int _class) {
	switch (_class) {
		case LL_MISSINGEOF:
			fatal("%s:%d: Expected %s, found %s (%s).\n", file_name, line_number, LLgetSymbol(EOFILE), LLgetSymbol(LLsymb), yytext);
			break;
		case LL_DELETE:
			fatal("%s:%d: Unexpected %s (%s).\n", file_name, line_number, LLgetSymbol(LLsymb), yytext);
			break;
		default:
			fatal("%s:%d: Expected %s, found %s (%s).\n", file_name, line_number, LLgetSymbol(_class), LLgetSymbol(LLsymb), yytext);
			break;
	}
}

}

ucm<void *> {
	Ucm *ucm;
	Variant *variant;
}:
	{
		if (option_verbose)
			fprintf(stderr, "Reading input\n");
		LLretval = ucm = new Ucm();
	}
	'\n'*
	[
		header_line(ucm)
		'\n'+
	]+
	{
		ucm->process_header();
		ucm->validate_states();
	}
	CHARMAP '\n'+
	[
		mapping(ucm)
		'\n'+
	]+
	END CHARMAP
	[
		'\n'+
		[
			[
				[
					CHARMAP '\n'+
					[
						mapping(ucm)
						'\n'+
					]+
					END CHARMAP
					'\n'*
				]?
			]
		|
			[
				VARIANT
				[
					NUMBER
				|
					HEXNUMBER
				]
				{
					variant = new Variant(ucm, strtol(yytext, NULL, 0));
					ucm->add_variant(variant);
				}
				'\n'+
				[
					mapping(variant)
					'\n'+
				]+
				END VARIANT
				['\n'+]..?
			]+
		]
	]?
;


header_line(Ucm *ucm) {
	Ucm::tag_t tag;
} :
	TAG
	{ tag = string_to_tag(yytext); }
	value
	{ ucm->set_tag_value(tag, yytext); }
|
	_STATE
	state(ucm)
;

value:
	STRING
|
	NUMBER
|
	CHARSEQ
;

state(Ucm *ucm) {
	int flags = 0;
} :
	[
		[
			_INITIAL { flags |= State::INITIAL; }
		|
			SURROGATES
		]
		','
	]?
	{ ucm->new_codepage_state(flags); }
	[
		entry(ucm)
		[
			','
			...
		]*
	]?
;

entry(Ucm *ucm) {
	Entry result(0, 0, 0, ACTION_FINAL, 0, 0);
} :
	HEXNUM
	//FIXME: check for range of numbers!
	{ result.low = result.high = (int) strtol(yytext, NULL, 16); }
	[
		'-'
		HEXNUM
		{ result.high = (int) strtol(yytext, NULL, 16); }
	]?
	[
		':'
		HEXNUM
		{
			result.next_state = (int) strtol(yytext, NULL, 16);
			result.action = ACTION_VALID;
		}
	]?
	[
		'.'
		[
			ACTION
			{
				switch (yytext[0]) {
					case 'u':
						result.action = ACTION_UNASSIGNED;
						break;
					case 's':
						result.action = ACTION_SHIFT;
						break;
					case 'p':
						result.action = ACTION_FINAL_PAIR;
						break;
					case 'i':
						result.action = ACTION_ILLEGAL;
						break;
					default:
						PANIC();
				}
			}
		|
			{ result.action = ACTION_FINAL; }
		]
	]?
	{ ucm->new_codepage_entry(result); }
;

mapping(UcmBase *ucm) {
	Mapping *mapping = new Mapping();
} :
	TAG
	{
		uint32_t codepoint;
		if (sscanf(yytext, "<U%" SCNx32 ">", &codepoint) == 0 || codepoint > 0x10ffff)
			fatal("%s:%d: Tag does not specify a valid unicode codepoint\n", file_name, line_number);
		mapping->codepoints.push_back(codepoint);
	}
	[
		'+'?
		...
	]*
	CHARSEQ
	{ parse_byte_sequence(yytext, mapping->codepage_bytes); }
	[
		PRECISION
		{ mapping->precision = yytext[1] - '0'; }
	]?
	{ ucm->add_mapping(mapping); }
;

